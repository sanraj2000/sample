name: Docker Image CI

on:
  pull_request:
    branches: [ "master" ]

jobs:

  build:
 
    runs-on: ubuntu-latest

    steps:
   # - uses: kamatama41/get-pr-number-action@v0
    - name: Merge aginst master
      if: github.event.pull_request.base.ref == 'master'
      run: echo  ${{ github.event.number }}
    
    - name: Merge against sanraj2000-patch-1
      if: github.event.pull_request.base.ref == 'sanraj2000-patch-1'
      run: echo sanraj2000-patch-1
      
    - uses: actions/checkout@v3
    - name: Build with Maven
      run: mvn -B package --file pom.xml
      
    - name: Project folder
      run: | 
       pwd
       echo  ${{github.event.pull_request.number}}
       echo  ${{ github.event.number }}
    
    - name: Login docker
      run: docker login -u sanraj2000 -p ${{ secrets.DOCKER_TOKEN }} docker.io
    
    - name: Build the Docker image
     # run: docker build -t sanraj2000/book:${{github.event.pull_request.number}} -f Dockerfile .
      run: docker build -t sanraj2000/book:${{ github.event.number }} -f Dockerfile .
     
   
      
    - name: Push the  docker image
      run: docker push sanraj2000/book:${{github.event.pull_request.number}}
      
    #- name: Extract metadata (tags, labels) for Docker
     # id: meta
     # uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
     # with:
     #     images: sanraj2000/test_repo
      
    #- name: Build and push Docker image
     # uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
      #with:
       # context: .
       # push: true 
       # tags: ${{ steps.meta.outputs.tags }}
        
        
        #tags:  $(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
       # tags: ${{ github.event.number }}
       # labels: ${{ steps.meta.outputs.labels }}
      
    - name: Build the stack
      run: docker-compose up -d
      
    - name: Check the running container
      run: docker ps
      
    - name: All the containers
      run: docker ps -a
    
    - name: Check elasticsearch health
      run: |
          sleep 60
          curl -X GET http://localhost:9200/
      
   
          
    - name: Checking Post1
      run: |
          sleep 60
           curl -X POST -H "Content-Type: application/json" \
               -d '{"id": "1", "bookname": "Ponniyin Selvan", "name": "Kalki", "created": "1954-05-16" }'\
               http://localhost:8080/api/add  
          
    - name: Checking Post2
      run: |
           curl -X POST -H "Content-Type: application/json" \
               -d '{"id": "6", "bookname": "The Alchemist", "name": "Paulo Coelho", "created": "1988-05-16" }'\
               http://localhost:8080/api/add 
          
    - name: Checking Post3
      run: |
           curl -X POST -H "Content-Type: application/json" \
               -d '{"id": "2", "bookname": "Shivagamiyin Sapatham", "name": "kalki", "created": "1960-08-1" }'\
               http://localhost:8080/api/add
          
    - name: Checking Post4
      run: |
           curl -X POST -H "Content-Type: application/json" \
               -d '{"id": "3", "bookname": "Kadal pura", "name": "Sandiliyan", "created": "1974-08-25" }'\
               http://localhost:8080/api/add
           
    - name: Checking GetAll
      run: |
           sleep 60
           curl -X GET http://localhost:8080/api
           
    - name: Checking SearchByDate
      run: |
           sleep 60
           curl -X GET http://localhost:8080/api/book/search/1954-05-16
           
    - name: Checking Get1
      run: |
           sleep 60
           curl -X GET  http://localhost:8080/api/book/1
           
    - name: Checking Delete1
      run: |
           sleep 60
           curl -X GET  http://localhost:8080/api/book/delete/1
           
    - name: Checking GetAll
      run: |
           sleep 60
           curl -X GET http://localhost:8080/api
